package functionality

import (
	"fmt"
	"html"
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/Cekretik/telegram-bot-api-master"
	"github.com/joho/godotenv"
	"gorm.io/gorm"
)

type UserPromoStatus struct {
	ChatID     int64
	PromoState string
}

type Entity struct {
	Type   string
	URL    string
	Offset int
	Length int
}

var userPromoStatuses = make(map[int64]*UserPromoStatus)

func convertEntities(tgEntities []tgbotapi.MessageEntity) []Entity {
	var entities []Entity
	for _, e := range tgEntities {
		entities = append(entities, Entity{
			Type:   e.Type,
			URL:    e.URL,
			Offset: e.Offset,
			Length: e.Length,
		})
	}
	return entities
}

func handlePromoCommand(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	messageText := "‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:"
	cancelKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∞"),
		),
	)
	userPromoStatuses[chatID] = &UserPromoStatus{
		ChatID:     chatID,
		PromoState: "awaitingPromoCode",
	}
	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = cancelKeyboard
	bot.Send(msg)

}

func processPromoCodeInput(bot *tgbotapi.BotAPI, chatID int64, promoCode string, db *gorm.DB) {
	if promoCode == "–û—Ç–º–µ–Ω–∞" {
		sendStandardKeyboard(bot, chatID)
		return
	}

	var promo PromoCode
	if err := db.Where("code = ?", promoCode).First(&promo).Error; err != nil {
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}
	if promo.Activations >= promo.MaxActivations {
		msg := tgbotapi.NewMessage(chatID, "–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	var usedPromo UsedPromoCode
	if err := db.Where("user_id = ? AND promo_code = ?", chatID, promoCode).First(&usedPromo).Error; err == nil {
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}
	rate, err := getCurrencyRate()
	if err != nil {
		log.Printf("Error getting currency rate: %v", err)
		return
	}
	bonusInRubles := promo.Discount / rate
	switch promo.Type {
	case "fixed":
		UpdateUserBalance(db, chatID, bonusInRubles)
		congratulationMessage := fmt.Sprintf("üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!\n\nüåü –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %.2f—Ä", promo.Discount)
		bot.Send(tgbotapi.NewMessage(chatID, congratulationMessage))
	}
	newUsedPromo := UsedPromoCode{
		UserID:    chatID,
		PromoCode: promoCode,
		Used:      true,
	}
	db.Create(&newUsedPromo)

	promo.Activations++
	db.Save(&promo)

	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.")
	msg.ReplyMarkup = CreateQuickReplyMarkup()
	bot.Send(msg)
}

func handleCreatePromoCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	if !isAdmin(bot, int64(update.Message.From.ID)) {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."))
		return
	}

	args := strings.Split(update.Message.Text, " ")

	if len(args) != 4 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /createpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å–∫–∏–¥–∫–∞] [–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]"))
		return
	}

	promoName := args[1]
	discount, err := strconv.ParseFloat(args[2], 64)
	if err != nil || discount <= 0 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∫–∏–¥–∫–∏."))
		return
	}

	maxActivations, err := strconv.ParseInt(args[3], 10, 64)
	if err != nil || maxActivations <= 0 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π."))
		return
	}

	promo := PromoCode{
		Code:           promoName,
		Discount:       discount,
		MaxActivations: maxActivations,
		Activations:    0,
		Type:           "discount",
	}

	if err := db.Create(&promo).Error; err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."))
		return
	}

	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: %s", promo.Code)))
}
func isAdmin(bot *tgbotapi.BotAPI, userID int64) bool {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	channelIDStr := os.Getenv("CHANNEL_ID")
	channelID, err := strconv.ParseInt(channelIDStr, 10, 64)
	if err != nil {
		log.Fatalf("Error parsing CHANNEL_ID: %v", err)
	}

	chatMemberConfig := tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: channelID,
			UserID: userID,
		},
	}
	member, err := bot.GetChatMember(chatMemberConfig)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return false
	}

	return member.Status == "administrator" || member.Status == "creator"
}

func handleCreateUrlCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	botLink := os.Getenv("BOT_LINK")
	if !isAdmin(bot, int64(update.Message.From.ID)) {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"))
		return
	}

	args := strings.Split(update.Message.Text, " ")
	if len(args) != 4 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /createurl [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∫–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤]"))
		return
	}

	linkName, amountStr, maxClicksStr := args[1], args[2], args[3]
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—É–º–º—ã."))
		return
	}
	maxClicks, err := strconv.ParseInt(maxClicksStr, 10, 64)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤."))
		return
	}

	linkCode := GenerateSpecialLink(linkName)
	var existingPromo PromoCode
	if db.Where("code = ?", linkCode).First(&existingPromo).Error == nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–°—Å—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —Ä–∞–Ω–µ–µ."))
		return
	}
	promo := PromoCode{
		Code:           linkCode,
		Discount:       amount,
		MaxActivations: maxClicks,
		Activations:    0,
		Type:           "fixed",
	}
	db.Create(&promo)
	specialLink := fmt.Sprintf(botLink+"?start=%s", linkCode)
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: %s", specialLink)))
}

func GenerateSpecialLink(linkName string) string {
	return fmt.Sprint(linkName) + "_"
}
func processSpecialLink(bot *tgbotapi.BotAPI, chatID int64, linkCode string, db *gorm.DB) {
	var promo PromoCode

	if err := db.Where("code = ?", linkCode).First(&promo).Error; err != nil {
		msg := tgbotapi.NewMessage(chatID, "–°–ø–µ—Ü. —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	if promo.Activations >= promo.MaxActivations {
		msg := tgbotapi.NewMessage(chatID, "–≠—Ç–∞ —Å–ø–µ—Ü. —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	var usedPromo UsedPromoCode
	if err := db.Where("user_id = ? AND promo_code = ?", chatID, linkCode).First(&usedPromo).Error; err == nil {
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü. —Å—Å—ã–ª–∫–µ.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	rate, err := getCurrencyRate()
	if err != nil {
		log.Printf("Error getting currency rate: %v", err)
		return
	}
	bonusInRubles := promo.Discount / rate

	UpdateUserBalance(db, chatID, bonusInRubles)
	congratulationMessage := fmt.Sprintf("üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!\n\nüåü –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %.2f—Ä", promo.Discount)
	bot.Send(tgbotapi.NewMessage(chatID, congratulationMessage))
	promo.Activations++
	db.Save(&promo)

	newUsedPromo := UsedPromoCode{
		UserID:    chatID,
		PromoCode: linkCode,
		Used:      true,
	}
	db.Create(&newUsedPromo)
}

func handleBonusCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	if isAdmin(bot, int64(update.Message.From.ID)) {
		bonusActive = !bonusActive
		message := "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."

		if bonusActive {
			bonusGiven = 0
			message = "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
		}

		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, message))
	} else {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."))
	}
}

func handleBroadcastCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	if !isAdmin(bot, int64(update.Message.From.ID)) {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	parts := strings.SplitN(update.Message.Text, " ", 2)
	if len(parts) < 2 || len(parts[1]) == 0 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."))
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast
	message := parts[1]

	var entities []Entity
	if len(update.Message.Entities) > 0 {
		shiftedEntities := make([]tgbotapi.MessageEntity, len(update.Message.Entities))
		for i, entity := range update.Message.Entities {
			if entity.Offset >= len(parts[0]) {
				shiftedEntities[i] = entity
				shiftedEntities[i].Offset -= len(parts[0]) + 1
			}
		}
		entities = convertEntities(shiftedEntities)
	}

	formattedMessage, err := formatBroadcastMessage(message, entities)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: "+err.Error()))
		return
	}

	go broadcastMessage(bot, db, formattedMessage)
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å."))
}
func broadcastMessage(bot *tgbotapi.BotAPI, db *gorm.DB, message string) {
	var users []UserState
	db.Find(&users).Where("previously_subscribed = ? AND subscribed = ?", true, true)

	for _, user := range users {
		msg := tgbotapi.NewMessage(user.UserID, message)
		msg.ParseMode = tgbotapi.ModeHTML
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat ID %d: %v", user.UserID, err)
		}
	}

	log.Println("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}

func formatBroadcastMessage(message string, entities []Entity) (string, error) {
	var formattedMessage strings.Builder

	lastIdx := 0
	for _, entity := range entities {
		if entity.Offset < lastIdx || entity.Offset+entity.Length > len(message) {
			return "", fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å—É—â–Ω–æ—Å—Ç–∏: Offset=%d, Length=%d, lastIdx=%d, messageLength=%d",
				entity.Offset, entity.Length, lastIdx, len(message))
		}

		formattedMessage.WriteString(html.EscapeString(message[lastIdx:entity.Offset]))

		entityText := html.EscapeString(message[entity.Offset : entity.Offset+entity.Length])

		switch entity.Type {
		case "bold":
			formattedMessage.WriteString("<b>" + entityText + "</b>")
		case "italic":
			formattedMessage.WriteString("<i>" + entityText + "</i>")
		case "code":
			formattedMessage.WriteString("<code>" + entityText + "</code>")
		case "pre":
			formattedMessage.WriteString("<pre>" + entityText + "</pre>")
		case "text_link":
			formattedMessage.WriteString("<a href=\"" + entity.URL + "\">" + entityText + "</a>")
		case "underline":
			formattedMessage.WriteString("<u>" + entityText + "</u>")
		case "strikethrough":
			formattedMessage.WriteString("<s>" + entityText + "</s>")
		case "spoiler":
			formattedMessage.WriteString("<tg-spoiler>" + entityText + "</tg-spoiler>")
		case "blockquote":
			formattedMessage.WriteString("<blockquote>" + entityText + "</blockquote>")
		default:
			formattedMessage.WriteString(entityText)
		}

		lastIdx = entity.Offset + entity.Length
	}

	formattedMessage.WriteString(html.EscapeString(message[lastIdx:]))

	return formattedMessage.String(), nil
}

func notifyAdminsAboutNewUser(bot *tgbotapi.BotAPI, user *tgbotapi.User, isPremium bool, db *gorm.DB) {
	if !UserIsNew(db, user.ID) {
		return
	}
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	channelIDStr := os.Getenv("CHANNEL_ID")
	channelID, err := strconv.ParseInt(channelIDStr, 10, 64)
	if err != nil {
		log.Fatalf("Error parsing CHANNEL_ID: %v", err)
	}

	chatAdministratorsConfig := tgbotapi.ChatAdministratorsConfig{
		ChatConfig: tgbotapi.ChatConfig{
			ChatID: channelID,
		},
	}

	admins, err := bot.GetChatAdministrators(chatAdministratorsConfig)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %v", err)
		return
	}

	messageText := fmt.Sprintf("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\nID: %d\n–†–µ–≥–∏–æ–Ω: %s\nPremium: %t",
		user.UserName, user.ID, user.LanguageCode, isPremium)

	for _, admin := range admins {
		msg := tgbotapi.NewMessage(admin.User.ID, messageText)
		bot.Send(msg)

	}
}
