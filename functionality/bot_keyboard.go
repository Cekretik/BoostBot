package functionality

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/joho/godotenv"
	"gorm.io/gorm"

	tgbotapi "github.com/Cekretik/telegram-bot-api-master"
)

var currentPage = ""

func addEmojiToCategoryName(categoryName string) string {
	switch categoryName {
	case "Telegram":
		return "üíé Telegram"
	case "YouTube":
		return "üéØ YouTube"
	case "Instagram":
		return "üì∏ Instagram"
	case "TikTok":
		return "üé≠ TikTok"
	case "Twitter":
		return "üê¶ Twitter"
	default:
		return categoryName
	}
}

func CreateQuickReplyMarkup() tgbotapi.ReplyKeyboardMarkup {
	balanceButton := tgbotapi.NewKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å")
	makeOrderButton := tgbotapi.NewKeyboardButton("‚úçÔ∏è–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
	makeReferralpButton := tgbotapi.NewKeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º")
	makeProfileButton := tgbotapi.NewKeyboardButton("üß©–ü—Ä–æ—Ñ–∏–ª—å")
	makeSiteButton := tgbotapi.NewKeyboardButton("‚ö°Ô∏è–°–∞–π—Ç (-55%)")
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(balanceButton, makeOrderButton),
		tgbotapi.NewKeyboardButtonRow(makeReferralpButton, makeProfileButton),
		tgbotapi.NewKeyboardButtonRow(makeSiteButton),
	)
}

func sendKeyboardAfterOrder(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ."
	msg := tgbotapi.NewMessage(chatID, messageText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}
func sendStandardKeyboard(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–û—Ç–º–µ–Ω–µ–Ω–æ"
	msg := tgbotapi.NewMessage(chatID, messageText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}

func sendStandardKeyboardAfterPayment(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å."
	msg := tgbotapi.NewMessage(chatID, messageText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}
func techSupMessage(bot *tgbotapi.BotAPI, chatID int64) {
	channelLink := "https://t.me/DARRINAN00"
	messageText := "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: "
	msg := tgbotapi.NewMessage(chatID, messageText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ù–∞–ø–∏—Å–∞—Ç—å", channelLink),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func sendSettingsKeyboard(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "‚öôÔ∏è–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É –Ω–∞:"
	msg := tgbotapi.NewMessage(chatID, messageText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("RUB", "changeCurrencyToRUB"),
			tgbotapi.NewInlineKeyboardButtonData("USD", "changeCurrencyToUSD"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func SendSubscriptionMessage(bot *tgbotapi.BotAPI, chatID int64) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	channelLink := os.Getenv("CHANNEL_LINK")
	messageText := "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
	msg := tgbotapi.NewMessage(chatID, messageText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", channelLink),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func SendSiteMessage(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "‚ö°Ô∏è–ù–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ [StageSMM](https://stagesmm.com/) –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –≤ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n‚òùÔ∏è–ì–ª–∞–≤–Ω—ã–º–∏ –ø–ª—é—Å–∞–º–∏ —Å–∞–π—Ç–∞ —è–≤–ª—è—é—Ç—Å—è:\n\nüî∏ –¶–µ–Ω—ã –ü–û –í–°–ï–ú –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞ 55% –¥–µ—à–µ–≤–ª–µ —Ü–µ–Ω –±–æ—Ç–∞ \nüî∏ –û–ì–†–û–ú–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥\nüî∏ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\nüî∏ –õ–µ–≥–∫–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∫—É—á–µ–π —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç\n\n‚ô¶Ô∏è–ò –Ω–∞–∫–æ–Ω–µ—Ü –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ `" + "STAGE10" + "` .–ò—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ 10% –±–æ–ª—å—à–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ‚ô¶Ô∏è"
	msg := tgbotapi.NewMessage(chatID, messageText)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("‚ö°Ô∏èStageSMM", "https://stagesmm.com/"),
		),
	)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = true
	bot.Send(msg)
}

func SendPromotionMessage(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var userState UserState
	err := db.Where("user_id = ?", chatID).First(&userState).Error
	if err != nil {
		log.Println("Error getting user state:", err)
		return
	}
	greetingText := fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %v! –Ø - StageSMM_Bot, –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. üöÄ –ü—Ä–æ–¥–≤–∏–≥–∞–π —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã —Å –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é!", userState.UserName)
	greetingMsg := tgbotapi.NewMessage(chatID, greetingText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	greetingMsg.ReplyMarkup = quickReplyMarkup
	if _, err := bot.Send(greetingMsg); err != nil {
		log.Println("Error sending greeting message:", err)
		return
	}
	categoryID := ""

	totalPages, err := database.GetTotalPagesForCategory(db, callbacks.itemsPerPage, categoryID)
	if err != nil {
		log.Println("Error getting total pages:", err)
		return
	}

	categoryKeyboard, err := CreateCategoryKeyboard(db)
	if err != nil {
		log.Println("Error creating category keyboard:", err)
		return
	}

	categoryMsg := tgbotapi.NewMessage(chatID, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:")
	categoryMsg.ReplyMarkup = categoryKeyboard
	if _, err := bot.Send(categoryMsg); err != nil {
		log.Println("Error sending category message:", err)
		return
	}

	subcategories, err := database.GetSubcategoriesByCategoryID(db, categoryID)
	if err != nil {
		log.Println("Error getting subcategories:", err)
		return
	}

	for _, subcategory := range subcategories {
		subcategoryMsg := tgbotapi.NewMessage(chatID, subcategory.Name)

		subcategoryKeyboard, err := CreateSubcategoryKeyboard(db, subcategory.ID, currentPage, strconv.Itoa(totalPages))
		if err != nil {
			log.Println("Error creating subcategory keyboard:", err)
			continue
		}

		subcategoryMsg.ReplyMarkup = subcategoryKeyboard
		if _, err := bot.Send(subcategoryMsg); err != nil {
			log.Println("Error sending subcategory message:", err)
		}
	}

	subcategoryID := ""
	totalServicePages, err := GetTotalPagesForService(db, itemsPerPage, categoryID)
	if err != nil {
		log.Println("Error getting total pages:", err)
		return
	}

	services, err := GetServicesBySubcategoryID(db, subcategoryID)
	if err != nil {
		log.Println("Error getting services:", err)
		return
	}

	for _, service := range services {
		serviceMsg := tgbotapi.NewMessage(chatID, service.Name)

		serviceKeyboard, err := CreateServiceKeyboard(db, service.ServiceID, currentPage, strconv.Itoa(totalServicePages))
		if err != nil {
			log.Println("Error creating service keyboard:", err)
			continue
		}

		serviceMsg.ReplyMarkup = serviceKeyboard
		if _, err := bot.Send(serviceMsg); err != nil {
			log.Println("Error sending service message:", err)
		}
	}
}

func CreateCategoryKeyboard(db *gorm.DB) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	categoryNames := []string{"Telegram", "YouTube", "Instagram", "TikTok", "Twitter"}

	categories, err := GetCategoriesFromDB(db)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	categoryMap := make(map[string]Category)
	for _, category := range categories {
		categoryMap[category.Name] = category
	}

	for i, name := range categoryNames {
		if category, ok := categoryMap[name]; ok {
			categoryNameWithEmoji := addEmojiToCategoryName(category.Name)
			categoryButton := tgbotapi.NewInlineKeyboardButtonData(categoryNameWithEmoji, fmt.Sprintf("category:%s", category.ID))

			if i == 0 || i%2 == 1 {
				rows = append(rows, []tgbotapi.InlineKeyboardButton{categoryButton})
			} else {
				lastRowIndex := len(rows) - 1
				rows[lastRowIndex] = append(rows[lastRowIndex], categoryButton)
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –æ—Ç–¥–µ–ª—å–Ω–æ –≤–Ω–∏–∑—É
	favoriteButton := tgbotapi.NewInlineKeyboardButtonData("‚ù§Ô∏è\u200düî•–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "profile:favorites")
	rows = append(rows, []tgbotapi.InlineKeyboardButton{favoriteButton})

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func CreateSubcategoryKeyboard(db *gorm.DB, categoryID, currentPage, totalPages string) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	subcategories, err := GetSubcategoriesByCategoryID(db, categoryID)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	startIdx, endIdx := calculatePageRange(len(subcategories), itemsPerPage, currentPage)

	for i := startIdx; i < endIdx; i++ {
		subcategory := subcategories[i]
		button := tgbotapi.NewInlineKeyboardButtonData(subcategory.Name, fmt.Sprintf("subcategory:%s", subcategory.ID))
		row := []tgbotapi.InlineKeyboardButton{button}
		rows = append(rows, row)
	}

	totalPagesInt, err := strconv.Atoi(totalPages)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	currentPageInt, err := strconv.Atoi(currentPage)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	paginationRow := createPaginationRow(categoryID, currentPageInt, totalPagesInt)
	rows = append(rows, paginationRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func CreateServiceKeyboard(db *gorm.DB, subcategoryID, currentPage, totalServicePages string) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	services, err := GetServicesBySubcategoryID(db, subcategoryID)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	startIdx, endIdx := calculatePageRange(len(services), itemsPerPage, currentPage)

	for i := startIdx; i < endIdx; i++ {
		service := services[i]

		button := tgbotapi.NewInlineKeyboardButtonData(service.Name, fmt.Sprintf("serviceInfo:%s", service.ServiceID))
		row := []tgbotapi.InlineKeyboardButton{button}
		rows = append(rows, row)
	}

	totalServicePagesInt, err := strconv.Atoi(totalServicePages)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	currentPageInt, err := strconv.Atoi(currentPage)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}
	backToSubcategoriesButton := tgbotapi.NewInlineKeyboardButtonData("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", fmt.Sprintf("backToSubcategories:%s", subcategoryID))
	rows = append(rows, []tgbotapi.InlineKeyboardButton{backToSubcategoriesButton})
	paginationRow := createServicePaginationRow(subcategoryID, currentPageInt, totalServicePagesInt)
	rows = append(rows, paginationRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}
