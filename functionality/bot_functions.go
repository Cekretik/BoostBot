package functionality

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/Cekretik/BoostBot/api"
	"github.com/Cekretik/BoostBot/cmd"
	"github.com/Cekretik/BoostBot/database"
	"github.com/Cekretik/BoostBot/models"
	tgbotapi "github.com/Cekretik/telegram-bot-api-master"
	"github.com/joho/godotenv"
	"gorm.io/gorm"
)

func convertAmount(amount float64, rate float64, toRUB bool) float64 {
	if toRUB {
		return amount * rate
	} else {
		return amount / rate
	}
}

func translateOrderStatus(status string) string {
	switch status {
	case "PENDING":
		return "–û–∂–∏–¥–∞–Ω–∏–µ"
	case "COMPLETED":
		return "–í—ã–ø–æ–ª–Ω–µ–Ω"
	case "IN_PROGRESS":
		return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
	case "PARTIAL":
		return "–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω"
	case "CANCELED":
		return "–û—Ç–º–µ–Ω–µ–Ω"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
	}
}

func handleBalanceCommand(bot *tgbotapi.BotAPI, userID int64, db *gorm.DB) {
	var userState models.UserState
	if err := db.Where("user_id = ?", userID).First(&userState).Error; err != nil {
		log.Printf("Error fetching user state: %v", err)
		return
	}

	rate, err := api.GetCurrencyRate()
	if err != nil {
		log.Printf("Error getting currency rate: %v", err)
		return
	}

	balance := userState.Balance
	var balanceMsgText string

	if userState.Currency == "RUB" {
		balance = convertAmount(balance, rate, true)
		balanceMsgText = fmt.Sprintf("üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ‚ÇΩ%.*f", cmd.DecimalPlaces, balance)
	} else {
		balanceMsgText = fmt.Sprintf("üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: $%.*f", cmd.DecimalPlaces, balance)
	}

	msg := tgbotapi.NewMessage(userID, balanceMsgText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ö°Ô∏è–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "replenishBalance"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéÅ–ü—Ä–æ–º–æ–∫–æ–¥", "promo"),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func handleProfileCommand(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var userState models.UserState
	if err := db.Where("user_id = ?", chatID).First(&userState).Error; err != nil {
		log.Printf("Error fetching user state: %v", err)
		return
	}
	rate, err := api.GetCurrencyRate()
	if err != nil {
		log.Printf("Error getting currency rate: %v", err)
		return
	}
	balance := userState.Balance
	var messageText string
	if userState.Currency == "RUB" {
		balance = convertAmount(balance, rate, true)
		messageText = fmt.Sprintf("ü§µ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:%v\n üîé ID:%v\n üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å:‚ÇΩ%.*f", userState.UserName, userState.UserID, main.DecimalPlaces, balance)
	} else {
		messageText = fmt.Sprintf("ü§µ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:%v\n üîé ID:%v\n üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å:$%.*f", userState.UserName, userState.UserID, main.DecimalPlaces, balance)
	}
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "allorders"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚õë –ü–æ–º–æ—â—å", "techsup"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleOrdersCommand(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var userOrders []models.UserOrders
	chatIDString := strconv.FormatInt(chatID, 10)
	result := db.Where("user_id = ?", chatIDString).Find(&userOrders)

	if result.Error != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", result.Error)
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö."))
		return
	}

	if len(userOrders) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫."))
		return
	}

	messageText := "üìù –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
	for _, order := range userOrders {
		status := translateOrderStatus(order.Status)
		messageText += fmt.Sprintf("–ù–æ–º–µ—Ä —É—Å–ª—É–≥–∏: %s\n–°—Å—ã–ª–∫–∞: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n–°—Ç–∞—Ç—É—Å: %s\n\n",
			order.ServiceID, order.Link, order.Quantity, status)
	}

	msg := tgbotapi.NewMessage(chatID, messageText)
	bot.Send(msg)
}

func GiveSubscriptionBonus(bot *tgbotapi.BotAPI, db *gorm.DB, userState *models.UserState) {
	rate, _ := api.GetCurrencyRate()
	bonusAmount := 25.00 / rate
	userState.Balance += bonusAmount
	bonusGiven++
	message := ("üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n\nüåü –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 25—Ä")
	bot.Send(tgbotapi.NewMessage(userState.UserID, message))
	userState.IsNewUser = false
}

func handleFavoritesCommand(bot *tgbotapi.BotAPI, db *gorm.DB, chatID int64) {
	favorites, err := database.GetUserFavorites(db, chatID)
	if err != nil || len(favorites) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥."))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, service := range favorites {
		button := tgbotapi.NewInlineKeyboardButtonData(service.Name, "serviceInfo:"+service.ServiceID)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:")
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func GenerateReferralLink(chatID int64) string {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	botLink := os.Getenv("BOT_LINK")
	return fmt.Sprintf(botLink+"?start=%d", chatID)
}

func ShowReferralStats(bot *tgbotapi.BotAPI, db *gorm.DB, userID int64) {
	var referrals []models.Referral
	db.Where("referrer_id = ?", userID).Find(&referrals)
	count := len(referrals)

	var totalEarned float64
	for _, referral := range referrals {
		totalEarned += referral.AmountEarned
	}

	msgText := fmt.Sprintf("üèÇ–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —á–µ–ª–æ–≤–µ–∫: %d\nüí∏–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: $%.2f\n\n üîò–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10%% –Ω–∞ –±–∞–ª–∞–Ω—Å —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏. \n\n ‚ú®–í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: %s", count, totalEarned, GenerateReferralLink(userID))

	msg := tgbotapi.NewMessage(userID, msgText)
	bot.Send(msg)
}

func handleChangeCurrency(bot *tgbotapi.BotAPI, userID int64, db *gorm.DB, toRUB bool) {
	var user models.UserState
	err := db.Where("user_id = ?", userID).First(&user).Error
	if err != nil {
		log.Printf("Error getting user: %v", err)
		return
	}

	if toRUB {
		user.Currency = "RUB"
	} else {
		user.Currency = "USD"
	}

	err = db.Save(&user).Error
	if err != nil {
		log.Printf("Error saving user: %v", err)
		return
	}

	msgText := "–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "
	if toRUB {
		msgText += "—Ä—É–±–ª–∏."
	} else {
		msgText += "–¥–æ–ª–ª–∞—Ä—ã."
	}
	msg := tgbotapi.NewMessage(userID, msgText)
	bot.Send(msg)
}

func FormatServiceInfo(service models.Services, subcategory models.Subcategory, increasePercent float64, userCurrency string, currencyRate float64) string {
	increasedRate := service.Rate + service.Rate*(increasePercent/100)

	if userCurrency == "RUB" {
		increasedRate = convertAmount(increasedRate, currencyRate, true)
		currencySymbol := "‚ÇΩ"
		return fmt.Sprintf(
			"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ\n\n"+
				"üî¢ ID —É—Å–ª—É–≥–∏: %d\n"+
				"üìù –£—Å–ª—É–≥–∞: %s\n\n"+
				"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n"+
				"üí∏ –¶–µ–Ω–∞ –∑–∞ 1000: %s%.*f\n\n"+
				"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n"+
				"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d",
			service.ID, service.Name, subcategory.Name, currencySymbol, cmd.DecimalPlaces, increasedRate, service.Min, service.Max)
	} else {
		currencySymbol := "$"
		return fmt.Sprintf(
			"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ\n\n"+
				"üî¢ ID —É—Å–ª—É–≥–∏: %d\n"+
				"üìù –£—Å–ª—É–≥–∞: %s\n\n"+
				"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n"+
				"üí∏ –¶–µ–Ω–∞ –∑–∞ 1000: %s%.*f\n\n"+
				"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n"+
				"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d",
			service.ID, service.Name, subcategory.Name, currencySymbol, cmd.DecimalPlaces, increasedRate, service.Min, service.Max)
	}
}
