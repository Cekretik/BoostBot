package main

import (
	"fmt"
	"log"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"gorm.io/gorm"
)

func WelcomeMessage(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
	msg := tgbotapi.NewMessage(chatID, messageText)
	bot.Send(msg)
}

func SendSubscriptionMessage(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
	msg := tgbotapi.NewMessage(chatID, messageText)

	// –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "https://t.me/botixaforcheck"),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func SendPromotionMessage(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	messageText := "ü§ñ–ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.\n\n üåü–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."

	msg := tgbotapi.NewMessage(chatID, messageText)

	itemsPerPage := 10

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
	categoryID := ""

	totalPages, err := GetTotalPagesForCategory(db, itemsPerPage, categoryID)
	if err != nil {
		log.Println("Error getting total pages:", err)
		return
	}

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ 1
	currentPage := "1"

	keyboard, err := CreatePromotionKeyboard(db, false, categoryID, currentPage, strconv.Itoa(totalPages))
	if err != nil {
		log.Println("Error creating promotion keyboard:", err)
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –Ω–µ–µ
		if _, err := bot.Send(msg); err != nil {
			log.Println("Error sending promotion message:", err)
		}
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
	msg.ReplyMarkup = keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Println("Error sending promotion message:", err)
	}
}

func CreatePromotionKeyboard(db *gorm.DB, showSubcategories bool, categoryID, currentPage, totalPages string) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	if !showSubcategories {
		// –í—ã–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		categories, err := GetCategoriesFromDB(db)
		if err != nil {
			return tgbotapi.InlineKeyboardMarkup{}, err
		}

		for _, category := range categories {
			button := tgbotapi.NewInlineKeyboardButtonData(category.Name, fmt.Sprintf("category:%s", category.ID))
			row := []tgbotapi.InlineKeyboardButton{button}
			rows = append(rows, row)
		}
	} else {
		// –í—ã–≤–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		subcategories, err := GetSubcategoriesByCategoryID(db, categoryID)
		if err != nil {
			return tgbotapi.InlineKeyboardMarkup{}, err
		}

		// –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

		// –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		itemsPerPage := 10
		startIdx, endIdx := calculatePageRange(len(subcategories), itemsPerPage, currentPage)

		for i := startIdx; i < endIdx; i++ {
			subcategory := subcategories[i]
			button := tgbotapi.NewInlineKeyboardButtonData(subcategory.Name, fmt.Sprintf("subcategory:%s", subcategory.ID))
			row := []tgbotapi.InlineKeyboardButton{button}
			rows = append(rows, row)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥" –∏ "–Ω–∞–∑–∞–¥" –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		paginationRow := createPaginationRow(categoryID, currentPage, totalPages)
		rows = append(rows, paginationRow)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}
