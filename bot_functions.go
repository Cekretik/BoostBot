package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
	"gorm.io/gorm"
)

var currentPage = ""

func sendKeyboardAfterOrder(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ."
	msg := tgbotapi.NewMessage(chatID, messageText)
	balanceButton := tgbotapi.NewKeyboardButton("üí∞–ë–∞–ª–∞–Ω—Å")
	ordersButton := tgbotapi.NewKeyboardButton("üìù–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
	makeOrderButton := tgbotapi.NewKeyboardButton("‚≠êÔ∏è–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
	makeFavoriteButton := tgbotapi.NewKeyboardButton("‚ù§Ô∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
	quickReplyMarkup := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(balanceButton),
		tgbotapi.NewKeyboardButtonRow(ordersButton),
		tgbotapi.NewKeyboardButtonRow(makeOrderButton),
		tgbotapi.NewKeyboardButtonRow(makeFavoriteButton),
	)

	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}
func sendStandardKeyboard(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–û—Ç–º–µ–Ω–µ–Ω–æ"
	msg := tgbotapi.NewMessage(chatID, messageText)
	balanceButton := tgbotapi.NewKeyboardButton("üí∞–ë–∞–ª–∞–Ω—Å")
	ordersButton := tgbotapi.NewKeyboardButton("üìù–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
	makeOrderButton := tgbotapi.NewKeyboardButton("‚≠êÔ∏è–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
	makeFavoriteButton := tgbotapi.NewKeyboardButton("‚ù§Ô∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
	quickReplyMarkup := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(balanceButton),
		tgbotapi.NewKeyboardButtonRow(ordersButton),
		tgbotapi.NewKeyboardButtonRow(makeOrderButton),
		tgbotapi.NewKeyboardButtonRow(makeFavoriteButton),
	)

	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}

func sendStandardKeyboardAfterPayment(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å."
	msg := tgbotapi.NewMessage(chatID, messageText)
	balanceButton := tgbotapi.NewKeyboardButton("üí∞–ë–∞–ª–∞–Ω—Å")
	ordersButton := tgbotapi.NewKeyboardButton("üìù–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
	makeOrderButton := tgbotapi.NewKeyboardButton("‚≠êÔ∏è–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
	makeFavoriteButton := tgbotapi.NewKeyboardButton("‚ù§Ô∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
	quickReplyMarkup := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(balanceButton),
		tgbotapi.NewKeyboardButtonRow(ordersButton),
		tgbotapi.NewKeyboardButtonRow(makeOrderButton),
		tgbotapi.NewKeyboardButtonRow(makeFavoriteButton),
	)

	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}
func WelcomeMessage(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
	msg := tgbotapi.NewMessage(chatID, messageText)
	balanceButton := tgbotapi.NewKeyboardButton("üí∞–ë–∞–ª–∞–Ω—Å")
	ordersButton := tgbotapi.NewKeyboardButton("üìù–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
	makeOrderButton := tgbotapi.NewKeyboardButton("‚≠êÔ∏è–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
	makeFavoriteButton := tgbotapi.NewKeyboardButton("‚ù§Ô∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
	quickReplyMarkup := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(balanceButton),
		tgbotapi.NewKeyboardButtonRow(ordersButton),
		tgbotapi.NewKeyboardButtonRow(makeOrderButton),
		tgbotapi.NewKeyboardButtonRow(makeFavoriteButton),
	)

	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}

func SendSubscriptionMessage(bot *tgbotapi.BotAPI, chatID int64) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	channelLink := os.Getenv("CHANNEL_LINK")
	messageText := "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
	msg := tgbotapi.NewMessage(chatID, messageText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", channelLink),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func SendPromotionMessage(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	messageText := "ü§ñ–ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.\n\n üåü–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."

	msg := tgbotapi.NewMessage(chatID, messageText)

	categoryID := ""

	totalPages, err := GetTotalPagesForCategory(db, itemsPerPage, categoryID)
	if err != nil {
		log.Println("Error getting total pages:", err)
		return
	}

	categoryKeyboard, err := CreateCategoryKeyboard(db)
	if err != nil {
		log.Println("Error creating category keyboard:", err)

		if _, err := bot.Send(msg); err != nil {
			log.Println("Error sending promotion message:", err)
		}
		return
	}

	msg.ReplyMarkup = categoryKeyboard
	if _, err := bot.Send(msg); err != nil {
		log.Println("Error sending promotion message:", err)
		return
	}

	subcategories, err := GetSubcategoriesByCategoryID(db, categoryID)
	if err != nil {
		log.Println("Error getting subcategories:", err)
		return
	}

	for _, subcategory := range subcategories {
		subcategoryMsg := tgbotapi.NewMessage(chatID, subcategory.Name)

		subcategoryKeyboard, err := CreateSubcategoryKeyboard(db, subcategory.ID, currentPage, strconv.Itoa(totalPages))
		if err != nil {
			log.Println("Error creating subcategory keyboard:", err)
			continue
		}

		subcategoryMsg.ReplyMarkup = subcategoryKeyboard
		if _, err := bot.Send(subcategoryMsg); err != nil {
			log.Println("Error sending subcategory message:", err)
		}
	}

	subcategoryID := ""
	totalServicePages, err := GetTotalPagesForService(db, itemsPerPage, categoryID)
	if err != nil {
		log.Println("Error getting total pages:", err)
		return
	}

	services, err := GetServicesBySubcategoryID(db, subcategoryID)
	if err != nil {
		log.Println("Error getting services:", err)
		return
	}

	for _, service := range services {
		serviceMsg := tgbotapi.NewMessage(chatID, service.Name)

		serviceKeyboard, err := CreateServiceKeyboard(db, service.ServiceID, currentPage, strconv.Itoa(totalServicePages))
		if err != nil {
			log.Println("Error creating service keyboard:", err)
			continue
		}

		serviceMsg.ReplyMarkup = serviceKeyboard
		if _, err := bot.Send(serviceMsg); err != nil {
			log.Println("Error sending service message:", err)
		}
	}
}

func CreateCategoryKeyboard(db *gorm.DB) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	categories, err := GetCategoriesFromDB(db)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	for _, category := range categories {
		button := tgbotapi.NewInlineKeyboardButtonData(category.Name, fmt.Sprintf("category:%s", category.ID))
		row := []tgbotapi.InlineKeyboardButton{button}
		rows = append(rows, row)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func CreateSubcategoryKeyboard(db *gorm.DB, categoryID, currentPage, totalPages string) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	subcategories, err := GetSubcategoriesByCategoryID(db, categoryID)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	startIdx, endIdx := calculatePageRange(len(subcategories), itemsPerPage, currentPage)

	for i := startIdx; i < endIdx; i++ {
		subcategory := subcategories[i]
		button := tgbotapi.NewInlineKeyboardButtonData(subcategory.Name, fmt.Sprintf("subcategory:%s", subcategory.ID))
		row := []tgbotapi.InlineKeyboardButton{button}
		rows = append(rows, row)
	}

	totalPagesInt, err := strconv.Atoi(totalPages)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	currentPageInt, err := strconv.Atoi(currentPage)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	paginationRow := createPaginationRow(categoryID, currentPageInt, totalPagesInt)
	rows = append(rows, paginationRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func CreateServiceKeyboard(db *gorm.DB, subcategoryID, currentPage, totalServicePages string) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	services, err := GetServicesBySubcategoryID(db, subcategoryID)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	startIdx, endIdx := calculatePageRange(len(services), itemsPerPage, currentPage)

	for i := startIdx; i < endIdx; i++ {
		service := services[i]

		button := tgbotapi.NewInlineKeyboardButtonData(service.Name, fmt.Sprintf("serviceInfo:%s", service.ServiceID))
		row := []tgbotapi.InlineKeyboardButton{button}
		rows = append(rows, row)
	}

	totalServicePagesInt, err := strconv.Atoi(totalServicePages)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	currentPageInt, err := strconv.Atoi(currentPage)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}
	backToSubcategoriesButton := tgbotapi.NewInlineKeyboardButtonData("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", fmt.Sprintf("backToSubcategories:%s", subcategoryID))
	rows = append(rows, []tgbotapi.InlineKeyboardButton{backToSubcategoriesButton})
	paginationRow := createServicePaginationRow(subcategoryID, currentPageInt, totalServicePagesInt)
	rows = append(rows, paginationRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func FormatServiceInfo(service Services, subcategory Subcategory) string {
	return fmt.Sprintf(
		"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ\n\n"+
			"üî¢ ID —É—Å–ª—É–≥–∏: %d\n"+
			"üìù –£—Å–ª–≥–∞: %s\n\n"+
			"üìù–ö–∞—Ç–µ–≥–æ—Ä–∏—è:%s\n\n"+
			"üí∏ –¶–µ–Ω–∞ –∑–∞ 1000: $%.*f\n\n"+
			"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n"+
			"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d",
		service.ID, service.Name, subcategory.Name, decimalPlaces, service.Rate, service.Min, service.Max)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
func handleBalanceCommand(bot *tgbotapi.BotAPI, userID int64, db *gorm.DB) {
	var userState UserState
	if err := db.Where("user_id = ?", userID).First(&userState).Error; err != nil {
		log.Printf("Error fetching user state: %v", err)
		return
	}

	balanceMsgText := fmt.Sprintf("üÜî –í–∞—à ID: %d\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å: $%.*f", userState.UserID, decimalPlaces, userState.Balance)
	msg := tgbotapi.NewMessage(userID, balanceMsgText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "replenishBalance"),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func handleOrdersCommand(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var userOrders []UserOrders
	chatIDString := strconv.FormatInt(chatID, 10) // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ chatID –≤ —Å—Ç—Ä–æ–∫—É
	result := db.Where("user_id = ?", chatIDString).Find(&userOrders)

	if result.Error != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", result.Error)
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö."))
		return
	}

	if len(userOrders) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫."))
		return
	}

	messageText := "üìù –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
	for _, order := range userOrders {
		status := translateOrderStatus(order.Status)
		messageText += fmt.Sprintf("–ù–æ–º–µ—Ä —É—Å–ª—É–≥–∏: %s\n–°—Å—ã–ª–∫–∞: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n–°—Ç–∞—Ç—É—Å: %s\n\n",
			order.ServiceID, order.Link, order.Quantity, status)
	}

	msg := tgbotapi.NewMessage(chatID, messageText)
	bot.Send(msg)
}

// translateOrderStatus –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
func translateOrderStatus(status string) string {
	switch status {
	case "PENDING":
		return "–û–∂–∏–¥–∞–Ω–∏–µ"
	case "COMPLETED":
		return "–í—ã–ø–æ–ª–Ω–µ–Ω"
	case "IN_PROGRESS":
		return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
	case "PARTIAL":
		return "–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω"
	case "CANCELED":
		return "–û—Ç–º–µ–Ω–µ–Ω"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
	}
}

func handleFavoritesCommand(bot *tgbotapi.BotAPI, db *gorm.DB, chatID int64) {
	favorites, err := GetUserFavorites(db, chatID)
	if err != nil || len(favorites) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥."))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, service := range favorites {
		button := tgbotapi.NewInlineKeyboardButtonData(service.Name, "serviceInfo:"+service.ServiceID)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:")
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}
