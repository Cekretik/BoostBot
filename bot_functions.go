package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
	"gorm.io/gorm"
)

var currentPage = ""

func CreateQuickReplyMarkup() tgbotapi.ReplyKeyboardMarkup {
	balanceButton := tgbotapi.NewKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å")
	makeOrderButton := tgbotapi.NewKeyboardButton("‚úçÔ∏è–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
	makeTechSupButton := tgbotapi.NewKeyboardButton("‚õë –ü–æ–º–æ—â—å")
	makeReferralpButton := tgbotapi.NewKeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º")
	makeProfileButton := tgbotapi.NewKeyboardButton("üß©–ü—Ä–æ—Ñ–∏–ª—å")
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(balanceButton, makeOrderButton),
		tgbotapi.NewKeyboardButtonRow(makeTechSupButton, makeReferralpButton),
		tgbotapi.NewKeyboardButtonRow(makeProfileButton),
	)
}

func sendKeyboardAfterOrder(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ."
	msg := tgbotapi.NewMessage(chatID, messageText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}
func sendStandardKeyboard(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–û—Ç–º–µ–Ω–µ–Ω–æ"
	msg := tgbotapi.NewMessage(chatID, messageText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}

func sendStandardKeyboardAfterPayment(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å."
	msg := tgbotapi.NewMessage(chatID, messageText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	msg.ReplyMarkup = quickReplyMarkup
	bot.Send(msg)
}
func techSupMessage(bot *tgbotapi.BotAPI, chatID int64) {
	channelLink := "https://t.me/DARRINAN00"
	messageText := "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: "
	msg := tgbotapi.NewMessage(chatID, messageText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ù–∞–ø–∏—Å–∞—Ç—å", channelLink),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func sendSettingsKeyboard(bot *tgbotapi.BotAPI, chatID int64) {
	messageText := "‚öôÔ∏è–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É –Ω–∞:"
	msg := tgbotapi.NewMessage(chatID, messageText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("RUB", "changeCurrencyToRUB"),
			tgbotapi.NewInlineKeyboardButtonData("USD", "changeCurrencyToUSD"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func SendSubscriptionMessage(bot *tgbotapi.BotAPI, chatID int64) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	channelLink := os.Getenv("CHANNEL_LINK")
	messageText := "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
	msg := tgbotapi.NewMessage(chatID, messageText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", channelLink),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func SendPromotionMessage(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var userState UserState
	err := db.Where("user_id = ?", chatID).First(&userState).Error
	if err != nil {
		log.Println("Error getting user state:", err)
		return
	}
	greetingText := fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %v! –Ø - StageSMM_Bot, –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. üöÄ –ü—Ä–æ–¥–≤–∏–≥–∞–π —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã —Å –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é!", userState.UserName)
	greetingMsg := tgbotapi.NewMessage(chatID, greetingText)
	quickReplyMarkup := CreateQuickReplyMarkup()
	greetingMsg.ReplyMarkup = quickReplyMarkup
	if _, err := bot.Send(greetingMsg); err != nil {
		log.Println("Error sending greeting message:", err)
		return
	}
	categoryID := ""

	totalPages, err := GetTotalPagesForCategory(db, itemsPerPage, categoryID)
	if err != nil {
		log.Println("Error getting total pages:", err)
		return
	}

	categoryKeyboard, err := CreateCategoryKeyboard(db)
	if err != nil {
		log.Println("Error creating category keyboard:", err)
		return
	}

	categoryMsg := tgbotapi.NewMessage(chatID, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:")
	categoryMsg.ReplyMarkup = categoryKeyboard
	if _, err := bot.Send(categoryMsg); err != nil {
		log.Println("Error sending category message:", err)
		return
	}

	subcategories, err := GetSubcategoriesByCategoryID(db, categoryID)
	if err != nil {
		log.Println("Error getting subcategories:", err)
		return
	}

	for _, subcategory := range subcategories {
		subcategoryMsg := tgbotapi.NewMessage(chatID, subcategory.Name)

		subcategoryKeyboard, err := CreateSubcategoryKeyboard(db, subcategory.ID, currentPage, strconv.Itoa(totalPages))
		if err != nil {
			log.Println("Error creating subcategory keyboard:", err)
			continue
		}

		subcategoryMsg.ReplyMarkup = subcategoryKeyboard
		if _, err := bot.Send(subcategoryMsg); err != nil {
			log.Println("Error sending subcategory message:", err)
		}
	}

	subcategoryID := ""
	totalServicePages, err := GetTotalPagesForService(db, itemsPerPage, categoryID)
	if err != nil {
		log.Println("Error getting total pages:", err)
		return
	}

	services, err := GetServicesBySubcategoryID(db, subcategoryID)
	if err != nil {
		log.Println("Error getting services:", err)
		return
	}

	for _, service := range services {
		serviceMsg := tgbotapi.NewMessage(chatID, service.Name)

		serviceKeyboard, err := CreateServiceKeyboard(db, service.ServiceID, currentPage, strconv.Itoa(totalServicePages))
		if err != nil {
			log.Println("Error creating service keyboard:", err)
			continue
		}

		serviceMsg.ReplyMarkup = serviceKeyboard
		if _, err := bot.Send(serviceMsg); err != nil {
			log.Println("Error sending service message:", err)
		}
	}
}

func CreateCategoryKeyboard(db *gorm.DB) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	categoryNames := []string{"Telegram", "YouTube", "Instagram", "TikTok", "Twitter"}

	categories, err := GetCategoriesFromDB(db)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	categoryMap := make(map[string]Category)
	for _, category := range categories {
		categoryMap[category.Name] = category
	}

	for i, name := range categoryNames {
		if category, ok := categoryMap[name]; ok {
			categoryNameWithEmoji := addEmojiToCategoryName(category.Name)
			categoryButton := tgbotapi.NewInlineKeyboardButtonData(categoryNameWithEmoji, fmt.Sprintf("category:%s", category.ID))

			if i == 0 || i%2 == 1 {
				rows = append(rows, []tgbotapi.InlineKeyboardButton{categoryButton})
			} else {
				lastRowIndex := len(rows) - 1
				rows[lastRowIndex] = append(rows[lastRowIndex], categoryButton)
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –æ—Ç–¥–µ–ª—å–Ω–æ –≤–Ω–∏–∑—É
	favoriteButton := tgbotapi.NewInlineKeyboardButtonData("‚ù§Ô∏è\u200düî•–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "profile:favorites")
	rows = append(rows, []tgbotapi.InlineKeyboardButton{favoriteButton})

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func addEmojiToCategoryName(categoryName string) string {
	switch categoryName {
	case "Telegram":
		return "üíé Telegram"
	case "YouTube":
		return "üéØ YouTube"
	case "Instagram":
		return "üì∏ Instagram"
	case "TikTok":
		return "üé≠ TikTok"
	case "Twitter":
		return "üê¶ Twitter"
	default:
		return categoryName
	}
}
func CreateSubcategoryKeyboard(db *gorm.DB, categoryID, currentPage, totalPages string) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	subcategories, err := GetSubcategoriesByCategoryID(db, categoryID)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	startIdx, endIdx := calculatePageRange(len(subcategories), itemsPerPage, currentPage)

	for i := startIdx; i < endIdx; i++ {
		subcategory := subcategories[i]
		button := tgbotapi.NewInlineKeyboardButtonData(subcategory.Name, fmt.Sprintf("subcategory:%s", subcategory.ID))
		row := []tgbotapi.InlineKeyboardButton{button}
		rows = append(rows, row)
	}

	totalPagesInt, err := strconv.Atoi(totalPages)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	currentPageInt, err := strconv.Atoi(currentPage)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	paginationRow := createPaginationRow(categoryID, currentPageInt, totalPagesInt)
	rows = append(rows, paginationRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func CreateServiceKeyboard(db *gorm.DB, subcategoryID, currentPage, totalServicePages string) (tgbotapi.InlineKeyboardMarkup, error) {
	var rows [][]tgbotapi.InlineKeyboardButton

	services, err := GetServicesBySubcategoryID(db, subcategoryID)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	startIdx, endIdx := calculatePageRange(len(services), itemsPerPage, currentPage)

	for i := startIdx; i < endIdx; i++ {
		service := services[i]

		button := tgbotapi.NewInlineKeyboardButtonData(service.Name, fmt.Sprintf("serviceInfo:%s", service.ServiceID))
		row := []tgbotapi.InlineKeyboardButton{button}
		rows = append(rows, row)
	}

	totalServicePagesInt, err := strconv.Atoi(totalServicePages)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}

	currentPageInt, err := strconv.Atoi(currentPage)
	if err != nil {
		return tgbotapi.InlineKeyboardMarkup{}, err
	}
	backToSubcategoriesButton := tgbotapi.NewInlineKeyboardButtonData("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", fmt.Sprintf("backToSubcategories:%s", subcategoryID))
	rows = append(rows, []tgbotapi.InlineKeyboardButton{backToSubcategoriesButton})
	paginationRow := createServicePaginationRow(subcategoryID, currentPageInt, totalServicePagesInt)
	rows = append(rows, paginationRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...), nil
}

func FormatServiceInfo(service Services, subcategory Subcategory, increasePercent float64, userCurrency string, currencyRate float64) string {
	increasedRate := service.Rate + service.Rate*(increasePercent/100)

	if userCurrency == "RUB" {
		increasedRate = convertAmount(increasedRate, currencyRate, true)
		currencySymbol := "‚ÇΩ"
		return fmt.Sprintf(
			"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ\n\n"+
				"üî¢ ID —É—Å–ª—É–≥–∏: %d\n"+
				"üìù –£—Å–ª—É–≥–∞: %s\n\n"+
				"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n"+
				"üí∏ –¶–µ–Ω–∞ –∑–∞ 1000: %s%.*f\n\n"+
				"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n"+
				"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d",
			service.ID, service.Name, subcategory.Name, currencySymbol, decimalPlaces, increasedRate, service.Min, service.Max)
	} else {
		currencySymbol := "$"
		return fmt.Sprintf(
			"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ\n\n"+
				"üî¢ ID —É—Å–ª—É–≥–∏: %d\n"+
				"üìù –£—Å–ª—É–≥–∞: %s\n\n"+
				"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n"+
				"üí∏ –¶–µ–Ω–∞ –∑–∞ 1000: %s%.*f\n\n"+
				"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n"+
				"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d",
			service.ID, service.Name, subcategory.Name, currencySymbol, decimalPlaces, increasedRate, service.Min, service.Max)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
func handleBalanceCommand(bot *tgbotapi.BotAPI, userID int64, db *gorm.DB) {
	var userState UserState
	if err := db.Where("user_id = ?", userID).First(&userState).Error; err != nil {
		log.Printf("Error fetching user state: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
	rate, err := getCurrencyRate()
	if err != nil {
		log.Printf("Error getting currency rate: %v", err)
		return
	}

	balance := userState.Balance
	var balanceMsgText string

	if userState.Currency == "RUB" {
		balance = convertAmount(balance, rate, true)
		balanceMsgText = fmt.Sprintf("üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ‚ÇΩ%.*f", decimalPlaces, balance)
	} else {
		balanceMsgText = fmt.Sprintf("üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: $%.*f", decimalPlaces, balance)
	}

	msg := tgbotapi.NewMessage(userID, balanceMsgText)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ö°Ô∏è–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "replenishBalance"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéÅ–ü—Ä–æ–º–æ–∫–æ–¥", "promo"),
		),
	)
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func handleProfileCommand(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var userState UserState
	if err := db.Where("user_id = ?", chatID).First(&userState).Error; err != nil {
		log.Printf("Error fetching user state: %v", err)
		return
	}
	rate, err := getCurrencyRate()
	if err != nil {
		log.Printf("Error getting currency rate: %v", err)
		return
	}
	balance := userState.Balance
	var messageText string
	if userState.Currency == "RUB" {
		balance = convertAmount(balance, rate, true)
		messageText = fmt.Sprintf("ü§µ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:%v\n üîé ID:%v\n üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å:‚ÇΩ%.*f", userState.UserName, userState.UserID, decimalPlaces, balance)
	} else {
		messageText = fmt.Sprintf("ü§µ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:%v\n üîé ID:%v\n üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å:$%.*f", userState.UserName, userState.UserID, decimalPlaces, balance)
	}
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "allorders"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏", "settings"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleOrdersCommand(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var userOrders []UserOrders
	chatIDString := strconv.FormatInt(chatID, 10) // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ chatID –≤ —Å—Ç—Ä–æ–∫—É
	result := db.Where("user_id = ?", chatIDString).Find(&userOrders)

	if result.Error != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", result.Error)
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö."))
		return
	}

	if len(userOrders) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫."))
		return
	}

	messageText := "üìù –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
	for _, order := range userOrders {
		status := translateOrderStatus(order.Status)
		messageText += fmt.Sprintf("–ù–æ–º–µ—Ä —É—Å–ª—É–≥–∏: %s\n–°—Å—ã–ª–∫–∞: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n–°—Ç–∞—Ç—É—Å: %s\n\n",
			order.ServiceID, order.Link, order.Quantity, status)
	}

	msg := tgbotapi.NewMessage(chatID, messageText)
	bot.Send(msg)
}

// translateOrderStatus –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
func translateOrderStatus(status string) string {
	switch status {
	case "PENDING":
		return "–û–∂–∏–¥–∞–Ω–∏–µ"
	case "COMPLETED":
		return "–í—ã–ø–æ–ª–Ω–µ–Ω"
	case "IN_PROGRESS":
		return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
	case "PARTIAL":
		return "–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω"
	case "CANCELED":
		return "–û—Ç–º–µ–Ω–µ–Ω"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
	}
}

func handleFavoritesCommand(bot *tgbotapi.BotAPI, db *gorm.DB, chatID int64) {
	favorites, err := GetUserFavorites(db, chatID)
	if err != nil || len(favorites) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥."))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, service := range favorites {
		button := tgbotapi.NewInlineKeyboardButtonData(service.Name, "serviceInfo:"+service.ServiceID)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:")
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func GenerateReferralLink(chatID int64) string {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	botLink := os.Getenv("BOT_LINK")
	return fmt.Sprintf(botLink+"?start=%d", chatID)
}

func ShowReferralStats(bot *tgbotapi.BotAPI, db *gorm.DB, userID int64) {
	var referrals []Referral
	db.Where("referrer_id = ?", userID).Find(&referrals)
	count := len(referrals)

	var totalEarned float64
	for _, referral := range referrals {
		totalEarned += referral.AmountEarned
	}

	msgText := fmt.Sprintf("üèÇ–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —á–µ–ª–æ–≤–µ–∫: %d\nüí∏–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: $%.2f\n\n üîò–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10%% –Ω–∞ –±–∞–ª–∞–Ω—Å —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏. \n\n ‚ú®–í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: %s", count, totalEarned, GenerateReferralLink(userID))

	msg := tgbotapi.NewMessage(userID, msgText)
	bot.Send(msg)
}

func convertAmount(amount float64, rate float64, toRUB bool) float64 {
	if toRUB {
		return amount * rate
	} else {
		return amount / rate
	}
}

func handleChangeCurrency(bot *tgbotapi.BotAPI, userID int64, db *gorm.DB, toRUB bool) {
	var user UserState
	err := db.Where("user_id = ?", userID).First(&user).Error
	if err != nil {
		log.Printf("Error getting user: %v", err)
		return
	}

	if toRUB {
		user.Currency = "RUB"
	} else {
		user.Currency = "USD"
	}

	err = db.Save(&user).Error
	if err != nil {
		log.Printf("Error saving user: %v", err)
		return
	}

	msgText := "–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "
	if toRUB {
		msgText += "—Ä—É–±–ª–∏."
	} else {
		msgText += "–¥–æ–ª–ª–∞—Ä—ã."
	}
	msg := tgbotapi.NewMessage(userID, msgText)
	bot.Send(msg)
}

type UserPromoStatus struct {
	ChatID     int64
	PromoState string
}

var userPromoStatuses = make(map[int64]*UserPromoStatus)

func handlePromoCommand(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	messageText := "‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:"
	cancelKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∞"),
		),
	)
	userPromoStatuses[chatID] = &UserPromoStatus{
		ChatID:     chatID,
		PromoState: "awaitingPromoCode",
	}
	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = cancelKeyboard
	bot.Send(msg)

}

func processPromoCodeInput(bot *tgbotapi.BotAPI, chatID int64, promoCode string, db *gorm.DB) {
	if promoCode == "–û—Ç–º–µ–Ω–∞" {
		sendStandardKeyboard(bot, chatID)
		return
	}

	var promo PromoCode
	if err := db.Where("code = ?", promoCode).First(&promo).Error; err != nil {
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}
	if promo.Activations >= promo.MaxActivations {
		msg := tgbotapi.NewMessage(chatID, "–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	var usedPromo UsedPromoCode
	if err := db.Where("user_id = ? AND promo_code = ?", chatID, promoCode).First(&usedPromo).Error; err == nil {
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	newUsedPromo := UsedPromoCode{
		UserID:    chatID,
		PromoCode: promoCode,
	}
	db.Create(&newUsedPromo)

	promo.Activations++
	db.Save(&promo)

	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.")
	msg.ReplyMarkup = CreateQuickReplyMarkup()
	bot.Send(msg)
}

func handleCreatePromoCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	if !isAdmin(bot, int64(update.Message.From.ID)) {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."))
		return
	}

	args := strings.Split(update.Message.Text, " ")

	if len(args) != 4 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /createpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å–∫–∏–¥–∫–∞] [–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]"))
		return
	}

	promoName := args[1]
	discount, err := strconv.ParseFloat(args[2], 64)
	if err != nil || discount <= 0 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∫–∏–¥–∫–∏."))
		return
	}

	maxActivations, err := strconv.ParseInt(args[3], 10, 64)
	if err != nil || maxActivations <= 0 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π."))
		return
	}

	promo := PromoCode{
		Code:           promoName,
		Discount:       discount,
		MaxActivations: maxActivations,
		Activations:    0,
	}

	if err := db.Create(&promo).Error; err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."))
		return
	}

	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: %s", promo.Code)))
}
func isAdmin(bot *tgbotapi.BotAPI, userID int64) bool {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	channelIDStr := os.Getenv("CHANNEL_ID")
	channelID, err := strconv.ParseInt(channelIDStr, 10, 64)
	if err != nil {
		log.Fatalf("Error parsing CHANNEL_ID: %v", err)
	}

	member, err := bot.GetChatMember(tgbotapi.ChatConfigWithUser{
		ChatID: channelID,
		UserID: int(userID),
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return false
	}

	return member.Status == "administrator" || member.Status == "creator"
}

func handleCreateUrlCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	botLink := os.Getenv("BOT_LINK")
	if !isAdmin(bot, int64(update.Message.From.ID)) {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"))
		return
	}

	args := strings.Split(update.Message.Text, " ")
	if len(args) != 4 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /createurl [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∫–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤]"))
		return
	}

	linkName, amountStr, maxClicksStr := args[1], args[2], args[3]
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—É–º–º—ã."))
		return
	}
	maxClicks, err := strconv.ParseInt(maxClicksStr, 10, 64)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤."))
		return
	}

	linkCode := GenerateSpecialLink(linkName, amountStr, maxClicksStr)
	promo := PromoCode{
		Code:           linkCode,
		Discount:       amount,
		MaxActivations: maxClicks,
		Activations:    0,
	}
	db.Create(&promo)
	specialLink := fmt.Sprintf(botLink+"?start=%s", linkCode)
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: %s", specialLink)))
}

func GenerateSpecialLink(linkName, amount, maxClicks string) string {
	return fmt.Sprintf("%s_%s_%s", linkName, amount, maxClicks)
}
func processSpecialLink(bot *tgbotapi.BotAPI, chatID int64, linkCode string, db *gorm.DB) {
	var promo PromoCode
	var usedPromos []UsedPromoCode
	if err := db.Where("user_id = ?", chatID).Find(&usedPromos).Error; err == nil {
		if len(usedPromos) > 0 {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
			msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
			msg.ReplyMarkup = CreateQuickReplyMarkup()
			bot.Send(msg)
			return
		}
	}

	if err := db.Where("code = ?", linkCode).First(&promo).Error; err != nil {
		msg := tgbotapi.NewMessage(chatID, "–°–ø–µ—Ü. —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	if promo.Activations >= promo.MaxActivations {
		msg := tgbotapi.NewMessage(chatID, "–≠—Ç–∞ —Å–ø–µ—Ü. —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	var usedPromo UsedPromoCode
	if err := db.Where("user_id = ? AND promo_code = ?", chatID, linkCode).First(&usedPromo).Error; err == nil {
		msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü. —Å—Å—ã–ª–∫–µ.")
		msg.ReplyMarkup = CreateQuickReplyMarkup()
		bot.Send(msg)
		return
	}

	rate, err := getCurrencyRate()
	if err != nil {
		log.Printf("Error getting currency rate: %v", err)

		return
	}
	bonusInRubles := promo.Discount / rate

	UpdateUserBalance(db, chatID, bonusInRubles)
	congratulationMessage := fmt.Sprintf("üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!\n\nüåü –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %.2f—Ä", promo.Discount)
	bot.Send(tgbotapi.NewMessage(chatID, congratulationMessage))
	promo.Activations++
	db.Save(&promo)

	newUsedPromo := UsedPromoCode{
		UserID:    chatID,
		PromoCode: linkCode,
		Used:      true,
	}
	db.Create(&newUsedPromo)
}

func handleBroadcastCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	if !isAdmin(bot, int64(update.Message.From.ID)) {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	args := strings.Split(update.Message.Text, " ")
	if len(args) < 2 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."))
		return
	}

	message := strings.Join(args[1:], " ")
	go broadcastMessage(bot, db, message)
	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å."))
}

func broadcastMessage(bot *tgbotapi.BotAPI, db *gorm.DB, message string) {
	var users []UserState
	db.Find(&users)

	for _, user := range users {
		msg := tgbotapi.NewMessage(user.UserID, message)
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat ID %d: %v", user.UserID, err)
		}
	}

	log.Println("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}
