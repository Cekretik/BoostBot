package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"gorm.io/gorm"
)

type UserStatus struct {
	ChatID           int64
	CurrentState     string
	PendingServiceID string
	Link             string
	Quantity         int
	ReplenishAmount  float64
	OrderID          string
}

var userStatuses map[int64]*UserStatus = make(map[int64]*UserStatus)

func getUserStatus(chatID int64) *UserStatus {
	if status, exists := userStatuses[chatID]; exists {
		return status
	}
	userStatuses[chatID] = &UserStatus{ChatID: chatID}
	return userStatuses[chatID]
}

func handleOrderCommand(bot *tgbotapi.BotAPI, chatID int64, service Services) {
	userStatus := getUserStatus(chatID)
	userStatus.CurrentState = "awaitingLink"
	userStatus.PendingServiceID = strconv.Itoa(service.ID)

	msgText := fmt.Sprintf("üí¨ –í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ —É—Å–ª—É–≥—É: %s.\n\n ID —É—Å—É–ª–≥–∏ %d. \n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É.", service.Name, service.ID)
	cancelKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∞"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ReplyMarkup = cancelKeyboard
	bot.Send(msg)
}

func isValidURL(url string) bool {
	return strings.HasPrefix(url, "http://") || strings.HasPrefix(url, "https://")
}

func handleUserInput(db *gorm.DB, bot *tgbotapi.BotAPI, update tgbotapi.Update, service Services) {
	chatID := update.Message.Chat.ID
	userStatus := getUserStatus(chatID)

	var user UserState
	if err := db.Where("user_id = ?", chatID).First(&user).Error; err != nil {
		log.Printf("Error fetching user state: %v", err)
		return
	}
	userCurrency := user.Currency
	currencyRate := getCurrentCurrencyRate()

	switch userStatus.CurrentState {
	case "awaitingLink":
		link := update.Message.Text
		if !isValidURL(link) {
			bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."))
			return
		}
		userStatus.Link = link
		userStatus.CurrentState = "awaitingQuantity"
		msgText := fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: %d, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: %d.", service.Min, service.Max)
		msg := tgbotapi.NewMessage(chatID, msgText)
		bot.Send(msg)

	case "awaitingQuantity":
		quantity, err := strconv.Atoi(update.Message.Text)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."))
			return
		} else if quantity < service.Min || quantity > service.Max {
			msgText := fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç %d –¥–æ %d.", service.Min, service.Max)
			bot.Send(tgbotapi.NewMessage(chatID, msgText))
			return
		}
		userStatus.Quantity = quantity
		increasePercent, err := strconv.ParseFloat(os.Getenv("PRICE_PERCENT"), 64)
		if err != nil {
			increasePercent = 0
		}
		cost := (float64(quantity) / 1000.0) * service.Rate
		cost += cost * (increasePercent / 100.0)
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var user UserState
		if err := db.Where("user_id = ?", chatID).First(&user).Error; err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ."))
			return
		}

		if user.Balance >= cost {
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üí∞–ö—É–ø–∏—Ç—å", "buy"),
				),
			)
			cancelKeyboard := tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∞"),
				),
			)
			var infoMsg string
			if userCurrency == "RUB" {
				cost = convertAmount(cost, currencyRate, true)
				infoMsg = fmt.Sprintf("–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: ‚ÇΩ%.*f. –í–∞—à –±–∞–ª–∞–Ω—Å: ‚ÇΩ%.*f.", decimalPlaces, cost, decimalPlaces, convertAmount(user.Balance, currencyRate, true))
			} else {
				infoMsg = fmt.Sprintf("–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: $%.*f. –í–∞—à –±–∞–ª–∞–Ω—Å: $%.*f.", decimalPlaces, cost, decimalPlaces, user.Balance)
			}
			msg := tgbotapi.NewMessage(chatID, infoMsg)
			msg.ReplyMarkup = cancelKeyboard
			msg.ReplyMarkup = keyboard
			bot.Send(msg)
		} else {
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "replenishBalance"),
				),
			)
			cancelKeyboard := tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∞"),
				),
			)
			var infoMsg string
			if userCurrency == "RUB" {
				cost = convertAmount(cost, currencyRate, true)
				infoMsg = fmt.Sprintf("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: ‚ÇΩ%.*f. –í–∞—à –±–∞–ª–∞–Ω—Å: ‚ÇΩ%.*f.", decimalPlaces, cost, decimalPlaces, convertAmount(user.Balance, currencyRate, true))
			} else {
				infoMsg = fmt.Sprintf("–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: $%.*f. –í–∞—à –±–∞–ª–∞–Ω—Å: $%.*f.", decimalPlaces, cost, decimalPlaces, user.Balance)
			}
			msg := tgbotapi.NewMessage(chatID, infoMsg)
			msg.ReplyMarkup = cancelKeyboard
			msg.ReplyMarkup = keyboard
			bot.Send(msg)
		}
	}
}

func handlePurchase(db *gorm.DB, bot *tgbotapi.BotAPI, chatID int64, service Services) {
	userStatus, exists := userStatuses[chatID]
	if !exists {
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
		return
	}
	userStatus.PendingServiceID = strconv.Itoa(service.ID)

	var user UserState
	if err := db.Where("user_id = ?", chatID).First(&user).Error; err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É."))
		return
	}

	cost := (float64(userStatus.Quantity) / 1000.0) * service.Rate
	if user.Balance < cost {
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."))
		return
	}
	user.Balance -= cost
	db.Save(&user)

	order := Order{
		ServiceID: userStatus.PendingServiceID,
		Link:      userStatus.Link,
		Quantity:  userStatus.Quantity,
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
	createdOrder, err := createOrder(order, token)
	if err != nil {
		user.Balance += cost
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: %s", err.Error())))
		return
	}

	db.Model(&UserOrders{}).Create(map[string]interface{}{
		"ChatID":     strconv.FormatInt(chatID, 10),
		"ServiceID":  createdOrder.ServiceID,
		"Cost":       createdOrder.Cost,
		"OrderID":    createdOrder.OrderID,
		"CreatedAt":  createdOrder.CreatedAt,
		"UpdatedAt":  createdOrder.UpdatedAt,
		"DeletedAt":  createdOrder.DeletedAt,
		"Link":       createdOrder.Link,
		"Quantity":   createdOrder.Quantity,
		"Status":     createdOrder.Status,
		"Charge":     createdOrder.Charge,
		"StartCount": createdOrder.StartCount,
		"Remains":    createdOrder.Remains,
	})

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. ID —É—Å–ª—É–≥–∏: %s", createdOrder.ServiceID)))
	delete(userStatuses, chatID)
	sendKeyboardAfterOrder(bot, chatID)
}
