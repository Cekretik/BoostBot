package main

import (
	"fmt"
	"log"

	"github.com/Cekretik/BoostBot/models"
	tgbotapi "github.com/Cekretik/telegram-bot-api-master"
	"gorm.io/gorm"
)

type BotStatus struct {
	ChatID       int64
	CurrentState string
}

var BotStatuses map[int64]*BotStatus = make(map[int64]*BotStatus)

var NewTokensChannel chan string = make(chan string, 100)

func CreateQuickReplyMarkup() tgbotapi.ReplyKeyboardMarkup {
	MenuButton := tgbotapi.NewKeyboardButton("–ú–µ–Ω—é")
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(MenuButton),
	)
}

func WelcomeMessage(bot *tgbotapi.BotAPI, chatID int64) {
	replyKeyboard := CreateQuickReplyMarkup()
	replyMsg := tgbotapi.NewMessage(chatID, "üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
	replyMsg.ReplyMarkup = replyKeyboard
	bot.Send(replyMsg)
}

func SendMenuButton(bot *tgbotapi.BotAPI, chatID int64, db *gorm.DB) {
	var botOwners models.BotOwners
	err := db.Where("user_id = ?", chatID).First(&botOwners).Error
	if err != nil {
		log.Println("Error getting user state:", err)
		return
	}

	greetingMessage := fmt.Sprintf("üëã–ü—Ä–∏–≤–µ—Ç %v! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –ø–æ –Ω–∞–∫—Ä—É—Ç–∫–µ", botOwners.UserName)
	messageText := greetingMessage
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíº–ë–æ—Ç—ã", "bots"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = inlineKeyboard
	bot.Send(msg)

}

func HandleBackButton(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery, db *gorm.DB) {
	chatID := callbackQuery.Message.Chat.ID
	messageID := callbackQuery.Message.MessageID

	var botOwners models.BotOwners
	err := db.Where("user_id = ?", chatID).First(&botOwners).Error
	if err != nil {
		log.Println("Error getting user state:", err)
		return
	}

	greetingMessage := fmt.Sprintf("üëã–ü—Ä–∏–≤–µ—Ç %v! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –ø–æ –Ω–∞–∫—Ä—É—Ç–∫–µ", botOwners.UserName)
	messageText := greetingMessage
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíº–ë–æ—Ç—ã", "bots"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, messageText)
	editMsg.ReplyMarkup = &inlineKeyboard
	bot.Send(editMsg)
}

func HandleBotStart(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery, db *gorm.DB) {
	chatID := callbackQuery.Message.Chat.ID
	messageID := callbackQuery.Message.MessageID

	var botCount int64
	err := db.Model(&models.BotOwners{}).Where("user_id = ? AND token != ''", chatID).Count(&botCount).Error
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return
	}

	messageText := fmt.Sprintf("üëã –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤! \n\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö –±–æ—Ç–æ–≤: %d –∏–∑ 10.", botCount)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üÜï–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "create_bot"),
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", "backtomenu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, messageText)
	editMsg.ReplyMarkup = &inlineKeyboard
	bot.Send(editMsg)
}
func InitiateTokenInput(bot *tgbotapi.BotAPI, chatID int64) {
	BotStatuses[chatID] = &BotStatus{
		ChatID:       chatID,
		CurrentState: "awaiting_token",
	}
	msg := tgbotapi.NewMessage(chatID, "‚ùóÔ∏è–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
	bot.Send(msg)
}

func HandleTokenInput(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *gorm.DB) {
	chatID := update.Message.Chat.ID
	token := update.Message.Text
	userName := update.Message.From.UserName

	if status, exists := BotStatuses[chatID]; exists && status.CurrentState == "awaiting_token" {
		var botCount int64
		db.Model(&models.BotOwners{}).Where("user_id = ?", chatID).Count(&botCount)

		if botCount >= 10 {
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 10 –±–æ—Ç–æ–≤.")
			bot.Send(msg)
			return
		}

		tempBot, err := tgbotapi.NewBotAPI(token)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º %s: %v", token, err)
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			bot.Send(msg)
			return
		}

		botInfo, err := tempBot.GetMe()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: %v", err)
			msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
			bot.Send(msg)
			return
		}

		userBotStatus := models.BotOwners{
			UserID:   chatID,
			UserName: userName,
			Token:    token,
			Running:  true,
			BotName:  botInfo.UserName,
			Balance:  0,
		}

		if err := db.Create(&userBotStatus).Error; err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: %v", err))
			bot.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ë–æ—Ç @%s –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≤–∫–ª—é—á–µ–Ω.", botInfo.UserName))
		bot.Send(msg)
		go func() {
			NewTokensChannel <- token
		}()
		delete(BotStatuses, chatID)
	}
}
